// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

//datasource db {
//  provider = "postgresql"
//  url      = env("DATABASE_URL")
//}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model Account {
  id                 String    @id @default(cuid())
  userId             String
  providerType       String
  providerId         String
  providerAccountId  String
  refreshToken       String?
  accessToken        String?
  accessTokenExpires DateTime?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  user               User      @relation(fields: [userId], references: [id])

  @@unique([providerId, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  userId       String
  expires      DateTime
  sessionToken String   @unique
  accessToken  String   @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id])
}

model User {
  id              String       @id @default(cuid())
  name            String?
  fistName        String?
  lastName        String?
  email           String       @unique
  emailVerified   DateTime?
  image           String?
  bio             String?
  phoneNumber     String?
  joinningDate    DateTime?
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
  password        String
  roleId          String
  departmentId    String
  accounts        Account[]
  sessions        Session[]
  role            Role         @relation(fields: [roleId], references: [id])
  fromThanksCards ThanksCard[] @relation("FromThanksCards")
  toThanksCards   ThanksCard[] @relation("ToThanksCards")

  department Department @relation(fields: [departmentId], references: [id])
}

model VerificationRequest {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token])
}

model Role {
  id    String @id @default(cuid())
  name  String @unique
  users User[]
}

model ThanksCard {
  id        String   @id @default(cuid())
  title     String
  body      String
  from      User     @relation("FromThanksCards", fields: [fromId], references: [id])
  fromId    String
  to        User     @relation("ToThanksCards", fields: [toId], references: [id])
  toId      String
  createdAt DateTime @default(now())
}

model Department {
  id       String       @id @default(cuid())
  code     Int          @unique
  name     String
  parentId String?
  parent   Department?  @relation("Parent Children", fields: [parentId], references: [id])
  children Department[] @relation("Parent Children")
  users    User[]
}

model Header {
  id           String @id @default(cuid())
  header_attr1 String
  header_attr2 String
  header_attr3 String
  header_attr4 String
  items        Item[]
}

model Item {
  id          String  @id @default(cuid())
  items_attr1 String?
  items_attr2 String?
  headerId    String
  // Header が削除されたときに、紐づく Item も削除するために onDelete: Cascade を指定している。
  header      Header  @relation(fields: [headerId], references: [id], onDelete: Cascade)
}
