generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// datasource db {
//   provider = "sqlite"
//   url      = "file:./dev.db"
// }

model Account {
  id                 String    @id @default(cuid())
  userId             String
  providerType       String
  providerId         String
  providerAccountId  String
  refreshToken       String?
  accessToken        String?
  accessTokenExpires DateTime?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  user               User      @relation(fields: [userId], references: [id])

  @@unique([providerId, providerAccountId])
}

model Session {
  id                    String               @id @default(cuid())
  userId                String
  expires               DateTime
  sessionToken          String               @unique
  accessToken           String               @unique
  createdAt             DateTime             @default(now())
  updatedAt             DateTime             @updatedAt
  user                  User                 @relation(fields: [userId], references: [id])
  personalInformation   PersonalInformation? @relation(fields: [personalInformationId], references: [id])
  address               Address?             @relation(fields: [addressId], references: [id])
  post                  Post?                @relation(fields: [postId], references: [id])
  personalInformationId String?
  addressId             String?
  postId                String?
}

model User {
  id                  String               @id @default(cuid())
  name                String?
  firstName           String?
  lastName            String?
  email               String               @unique
  emailVerified       DateTime?
  image               String?
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  password            String
  roleId              String
  accounts            Account[]
  sessions            Session[]
  role                Role                 @relation(fields: [roleId], references: [id])
  personalInformation PersonalInformation?
  address             Address?
  posts               Post[]
  messages            Message[] // Các tin nhắn đã gửi hoặc nhận bởi người dùng
  conversation        Conversation[]
}

model PersonalInformation {
  id          String    @id @default(cuid())
  phoneNumber String?
  bio         String?
  userId      String    @unique
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  user        User      @relation(fields: [userId], references: [id])
  sessions    Session[]
}

model Address {
  id        String    @id @default(cuid())
  userId    String    @unique
  address   String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  user      User      @relation(fields: [userId], references: [id])
  sessions  Session[]
}

model VerificationRequest {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token])
}

model Role {
  id    String @id @default(cuid())
  name  String @unique
  users User[]
}

model Post {
  id           String    @id @default(cuid())
  title        String?
  slug         String    @unique
  thumbnail    String?
  description  String?
  content      String?
  publishedAt  DateTime  @default(now())
  readTime     Int?
  likes        Int?      @default(0)
  shares       Int?      @default(0)
  commentCount Int?      @default(0)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  userId       String
  user         User      @relation(fields: [userId], references: [id])
  sessions     Session[]
}

model Category {
  id        String   @id @default(cuid())
  name      String
  slug      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Conversation {
  id        String    @id @default(cuid())
  messages  Message[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  user      User?     @relation(fields: [userId], references: [id])
  userId    String?
}

model Message {
  id             String       @id @default(cuid())
  user           User?        @relation(fields: [userId], references: [id])
  content        String
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  conversation   Conversation @relation(fields: [conversationId], references: [id])
  userId         String?
  conversationId String
}

model Email {
  id        String   @id @default(cuid())
  from      String
  to        String
  subject   String
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
